import { isArray, isPlainObject, isString } from "@vuepress/shared";
import { deprecatedLogger, droppedLogger } from "./utils.js";
import { logger } from "../utils.js";
const handleArraySidebarOptions = (config) => config
    .map((item) => {
    if (isString(item))
        return item;
    if (isPlainObject(item)) {
        const convertConfig = [
            ["title", "text"],
            ["path", "link"],
            ["collapsable", "collapsible"],
        ];
        convertConfig.forEach(([deprecatedOption, newOption]) => deprecatedLogger({
            options: item,
            deprecatedOption,
            newOption,
            scope: "sidebar",
        }));
        droppedLogger(item, "sidebarDepth", "Found in sidebar");
        // @ts-ignore
        if (isArray(item.children))
            // @ts-ignore
            handleArraySidebarOptions(item.children);
        return item;
    }
    return null;
})
    .filter((item) => item !== null);
/**
 * @deprecated You should use V2 standard sidebar config and avoid using it
 */
export const convertSidebarOptions = (config) => {
    if (config === false)
        return false;
    if (isArray(config))
        return handleArraySidebarOptions(config);
    if (isPlainObject(config) && config)
        return Object.fromEntries(Object.entries(config).map(([key, value]) => {
            if (isArray(value))
                return [key, handleArraySidebarOptions(value)];
            if (value === "structure" || value === false)
                return [key, value];
            logger.error('"sidebar" value should be an array, "structure" or false when setting as an object');
            return [key, false];
        }));
    logger.error('"sidebar" config should be an array or object');
    return false;
};
//# sourceMappingURL=sidebar.js.map