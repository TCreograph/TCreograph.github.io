{"version":3,"file":"setup.js","sources":["../../../src/client/composables/usePWAEvent.ts","../../../src/client/composables/useForceUpdate.ts","../../../src/client/composables/useRegister.ts","../../../src/client/composables/setup.ts"],"sourcesContent":["import { inject } from \"vue\";\nimport type { Emitter } from \"mitt\";\nimport type { InjectionKey } from \"vue\";\n\nexport type PWAEvent = Emitter<{\n  ready: ServiceWorkerRegistration;\n  registered: ServiceWorkerRegistration;\n  cached: ServiceWorkerRegistration;\n  updatefound: ServiceWorkerRegistration;\n  updated: ServiceWorkerRegistration;\n  offline: void;\n  error: Error;\n}>;\n\nexport const pwaEventSymbol: InjectionKey<PWAEvent> = Symbol.for(\"PWAEvent\");\n\nexport const usePWAEvent = (): PWAEvent => {\n  const pwaEvent = inject(pwaEventSymbol);\n\n  if (!pwaEvent) throw new Error(\"usePWAEvent() is called without provider.\");\n\n  return pwaEvent;\n};\n","import type { PWAEvent } from \"./usePWAEvent.js\";\n\nexport const useForceUpdate = (event: PWAEvent): void => {\n  event.on(\"updatefound\", () => {\n    void navigator.serviceWorker.getRegistration().then((registration) => {\n      // check whether a valid service worker is active\n      if (registration && registration.active)\n        // force refresh\n\n        // @ts-ignore\n        window.location.reload(true);\n    });\n  });\n};\n","import { withBase } from \"@vuepress/client\";\n\nimport type { PWAEvent } from \"./usePWAEvent.js\";\n\ndeclare const SW_PATH: string;\n\nexport const useRegister = async (event: PWAEvent): Promise<void> => {\n  const { register } = await import(\"register-service-worker\");\n\n  // Register service worker\n  register(withBase(SW_PATH), {\n    ready(registration) {\n      console.log(\"[PWA]: Service worker is active\");\n      event.emit(\"ready\", registration);\n    },\n\n    registered(registration) {\n      console.log(\"[PWA]: Service worker has been registered.\");\n      event.emit(\"registered\", registration);\n    },\n\n    cached(registration) {\n      console.log(\"[PWA]: Content has been cached for offline usage\");\n      event.emit(\"cached\", registration);\n    },\n\n    async updatefound(registration) {\n      if (await navigator.serviceWorker.getRegistration()) {\n        console.log(\"[PWA]: New content is downloading.\");\n        event.emit(\"updatefound\", registration);\n      }\n    },\n\n    updated(registration) {\n      console.log(\"[PWA]: New content is available, please refresh.\");\n\n      const key = \"service-worker-version\";\n      const version = Number(localStorage.getItem(key) || 0);\n\n      localStorage.setItem(key, (version + 1).toString());\n      localStorage.removeItem(\"manifest\");\n\n      event.emit(\"updated\", registration);\n    },\n\n    offline() {\n      console.log(\n        \"[PWA]: No internet connection found. App is running in offline mode.\"\n      );\n      event.emit(\"offline\");\n    },\n\n    error(err) {\n      console.log(\"[PWA]: Error during service worker registration:\", err);\n      event.emit(\"error\", err);\n    },\n  });\n};\n","import mitt from \"mitt\";\nimport { onMounted, provide } from \"vue\";\nimport { pwaEventSymbol } from \"./usePWAEvent.js\";\nimport { useForceUpdate } from \"./useForceUpdate.js\";\nimport { useRegister } from \"./useRegister.js\";\nimport type { PWAEvent } from \"./index.js\";\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare const __VUEPRESS_DEV__: boolean;\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare const __VUEPRESS_SSR__: boolean;\ndeclare const SW_FORCE_UPDATE: boolean;\n\nexport const setupPWA = (): void => {\n  if (__VUEPRESS_SSR__) return;\n\n  // create event emitter and provide it\n  const event: PWAEvent = mitt();\n\n  provide(pwaEventSymbol, event);\n\n  onMounted(async () => {\n    if (__VUEPRESS_DEV__) return;\n\n    let refreshing = false;\n\n    // only listen controllerchange event when a serviceWorker is active\n    if (navigator.serviceWorker?.controller)\n      navigator.serviceWorker.addEventListener(\"controllerchange\", () => {\n        if (refreshing) return;\n\n        refreshing = true;\n        window.location.reload();\n      });\n\n    if (SW_FORCE_UPDATE) useForceUpdate(event);\n\n    await useRegister(event);\n  });\n};\n"],"names":["pwaEventSymbol","useForceUpdate","event","registration","useRegister","register","withBase","key","version","err","setupPWA","mitt","provide","onMounted","_a","refreshing"],"mappings":"6GAca,MAAAA,EAAyC,OAAO,IAAI,UAAU,ECZ9DC,EAAkBC,GAA0B,CACvDA,EAAM,GAAG,cAAe,IAAM,CACvB,UAAU,cAAc,gBAAA,EAAkB,KAAMC,GAAiB,CAEhEA,GAAgBA,EAAa,QAI/B,OAAO,SAAS,OAAO,EAAI,CAC/B,CAAC,CACH,CAAC,CACH,ECPaC,EAAc,MAAOF,GAAmC,CACnE,KAAM,CAAE,SAAAG,CAAS,EAAI,KAAa,QAAA,yBAAyB,EAG3DA,EAASC,EAAS,OAAO,EAAG,CAC1B,MAAMH,EAAc,CAClB,QAAQ,IAAI,iCAAiC,EAC7CD,EAAM,KAAK,QAASC,CAAY,CAClC,EAEA,WAAWA,EAAc,CACvB,QAAQ,IAAI,4CAA4C,EACxDD,EAAM,KAAK,aAAcC,CAAY,CACvC,EAEA,OAAOA,EAAc,CACnB,QAAQ,IAAI,kDAAkD,EAC9DD,EAAM,KAAK,SAAUC,CAAY,CACnC,EAEA,MAAM,YAAYA,EAAc,CAC1B,MAAM,UAAU,cAAc,oBAChC,QAAQ,IAAI,oCAAoC,EAChDD,EAAM,KAAK,cAAeC,CAAY,EAE1C,EAEA,QAAQA,EAAc,CACpB,QAAQ,IAAI,kDAAkD,EAE9D,MAAMI,EAAM,yBACNC,EAAU,OAAO,aAAa,QAAQD,CAAG,GAAK,CAAC,EAErD,aAAa,QAAQA,GAAMC,EAAU,GAAG,SAAU,CAAA,EAClD,aAAa,WAAW,UAAU,EAElCN,EAAM,KAAK,UAAWC,CAAY,CACpC,EAEA,SAAU,CACR,QAAQ,IACN,sEACF,EACAD,EAAM,KAAK,SAAS,CACtB,EAEA,MAAMO,EAAK,CACT,QAAQ,IAAI,mDAAoDA,CAAG,EACnEP,EAAM,KAAK,QAASO,CAAG,CACzB,CACF,CAAC,CACH,EC5CaC,EAAW,IAAY,CAClC,GAAI,iBAAkB,OAGtB,MAAMR,EAAkBS,IAExBC,EAAQZ,EAAgBE,CAAK,EAE7BW,EAAU,SAAY,CArBxB,IAAAC,EAsBI,GAAI,iBAAkB,OAEtB,IAAIC,EAAa,IAGbD,EAAA,UAAU,gBAAV,MAAAA,EAAyB,YAC3B,UAAU,cAAc,iBAAiB,mBAAoB,IAAM,CAC7DC,IAEJA,EAAa,GACb,OAAO,SAAS,OAAO,EACzB,CAAC,EAEC,iBAAiBd,EAAeC,CAAK,EAEzC,MAAME,EAAYF,CAAK,CACzB,CAAC,CACH"}