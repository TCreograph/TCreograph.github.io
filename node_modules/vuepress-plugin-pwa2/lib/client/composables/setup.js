import i from"mitt";import{provide as a,onMounted as s}from"vue";import{withBase as c}from"@vuepress/client";const l=Symbol.for("PWAEvent"),d=o=>{o.on("updatefound",()=>{navigator.serviceWorker.getRegistration().then(r=>{r&&r.active&&window.location.reload(!0)})})},g=async o=>{const{register:r}=await import("register-service-worker");r(c(SW_PATH),{ready(e){console.log("[PWA]: Service worker is active"),o.emit("ready",e)},registered(e){console.log("[PWA]: Service worker has been registered."),o.emit("registered",e)},cached(e){console.log("[PWA]: Content has been cached for offline usage"),o.emit("cached",e)},async updatefound(e){await navigator.serviceWorker.getRegistration()&&(console.log("[PWA]: New content is downloading."),o.emit("updatefound",e))},updated(e){console.log("[PWA]: New content is available, please refresh.");const t="service-worker-version",n=Number(localStorage.getItem(t)||0);localStorage.setItem(t,(n+1).toString()),localStorage.removeItem("manifest"),o.emit("updated",e)},offline(){console.log("[PWA]: No internet connection found. App is running in offline mode."),o.emit("offline")},error(e){console.log("[PWA]: Error during service worker registration:",e),o.emit("error",e)}})},m=()=>{if(__VUEPRESS_SSR__)return;const o=i();a(l,o),s(async()=>{var r;if(__VUEPRESS_DEV__)return;let e=!1;(r=navigator.serviceWorker)!=null&&r.controller&&navigator.serviceWorker.addEventListener("controllerchange",()=>{e||(e=!0,window.location.reload())}),SW_FORCE_UPDATE&&d(o),await g(o)})};export{m as setupPWA};
//# sourceMappingURL=setup.js.map
