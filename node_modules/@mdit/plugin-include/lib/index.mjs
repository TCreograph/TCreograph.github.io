import v from"node:fs";import p from"upath";const w=/\r\n?|\n/g,_=e=>{const r=e.split(`
`),l=r.reduce((o,t)=>{for(let n=0;n<t.length;n++)if(t[n]!==" "&&t[n]!=="	")return Math.min(n,o);return o},1/0);return l<1/0?r.map(o=>o.slice(l)).join(`
`):e},E=[/^\/\/ ?#?((?:end)?region) ([\w*-]+)$/,/^\/\* ?#((?:end)?region) ([\w*-]+) ?\*\/$/,/^#pragma ((?:end)?region) ([\w*-]+)$/,/^<!-- #?((?:end)?region) ([\w*-]+) -->$/,/^#((?:End )Region) ([\w*-]+)$/,/^::#((?:end)region) ([\w*-]+)$/,/^# ?((?:end)?region) ([\w*-]+)$/],S=/^@include\(([^)]+(?:\.[a-z0-9]+))(?:#([\w-]+))?(?:\{(\d+)?-(\d+)?\})?\)$/,P=(e,r,l,o=!1)=>{const[t,n,d]=r.exec(e.trim())||[];return Boolean(t&&n&&d===l&&n.match(o?/^[Ee]nd ?[rR]egion$/:/^[rR]egion$/))},F=(e,r)=>{let l=null,o=-1;for(const[t,n]of e.entries())if(l===null){for(const d of E)if(P(n,d,r)){o=t+1,l=d;break}}else if(P(n,l,r,!0))return{lineStart:o,lineEnd:t};return null},$=(e,{cwd:r,includedFiles:l,resolvedPath:o})=>{const{filePath:t}=e;let n=t;if(!p.isAbsolute(t)){if(!r)return console.error(`[@mdit/plugin-include]: Error when resolving path: ${t}`),`
Error when resolving path
`;n=p.resolve(r,t)}if(l.push(n),!v.existsSync(n))return console.error(`[@mdit/plugin-include]: ${n} not found`),`
File not found
`;const d=v.readFileSync(n).toString().replace(w,`
`).split(`
`);let s=[];if("region"in e){const i=F(d,e.region);i&&(s=d.slice(i.lineStart,i.lineEnd))}else{const{lineStart:i,lineEnd:u}=e;s=d.slice(i&&i-1,u)}if(o&&n.endsWith(".md")){const i=p.dirname(n);s.unshift(`@include-push(${i})`),s.push("@include-pop()")}return _(s.join(`
`).replace(/\n?$/,`
`))},g=(e,r,{cwd:l,includedFiles:o})=>e.split(`
`).map(t=>{if(t.startsWith("@include")){const n=t.match(S);if(n){const[,d,s,i,u]=n,c=r.resolvePath(d,l),a=r.resolveImagePath||r.resolveLinkPath,h=$({filePath:c,...s?{region:s}:{lineStart:i?Number(i):0,lineEnd:u?Number(u):void 0}},{cwd:l,includedFiles:o,resolvedPath:a});return r.deep&&c.endsWith(".md")?g(h,r,{cwd:p.isAbsolute(c)?p.dirname(c):l?p.resolve(l,p.dirname(c)):null,includedFiles:o}):h}}return t}).join(`
`),k=e=>r=>{const l=r.env,o=l.includedFiles||(l.includedFiles=[]),t=e.currentPath(l);r.src=g(r.src,e,{cwd:t?p.dirname(t):null,includedFiles:o})},I=/^@include-push\(([^)]*?)\)$/,y=/^@include-pop\(\)$/,W=(e,r,l,o)=>{const t=e.bMarks[r]+e.tShift[r],n=e.eMarks[r],d=e.src.slice(t,n);let s=d.startsWith("@include-push");if(s){const i=d.match(I);if(i){if(o)return!0;const[,u]=i;e.line=r+1;const c=e.push("include_push","",0);c.map=[r,e.line],c.info=u,c.markup="include_push"}else s=!1}return s},A=(e,r,l,o)=>{const t=e.bMarks[r]+e.tShift[r],n=e.eMarks[r],d=e.src.slice(t,n);let s=d.startsWith("@include-pop");if(s)if(d.match(y)){if(o)return!0;e.line=r+1;const i=e.push("include_pop","",0);i.map=[r,e.line],i.markup="include_pop"}else s=!1;return s},b=(e,r,l,o)=>{var t;const n=r.attrIndex(e),d=(t=r.attrs)==null?void 0:t[n][1];if(d!=null&&d.startsWith(".")&&Array.isArray(o)){const{length:s}=o;if(s){const i=p.relative(p.dirname(l),o[s-1]);r.attrs[n][1]=`.${p.sep}${p.join(i,d)}`}}},R=(e,r)=>{const{currentPath:l,resolvePath:o=s=>s,deep:t=!1,resolveLinkPath:n=!0,resolveImagePath:d=!0}=r||{};if(typeof l!="function")return console.error('[@mdit/plugin-include]: "currentPath" is required');if(e.core.ruler.after("normalize","md_import",k({currentPath:l,resolvePath:o,deep:t,resolveLinkPath:n,resolveImagePath:d})),d||n){if(e.block.ruler.before("table","md_include_push",W,{alt:["paragraph","reference","blockquote","list"]}),e.block.ruler.before("table","md_include_pop",A,{alt:["paragraph","reference","blockquote","list"]}),e.renderer.rules.include_push=(s,i,u,c)=>{const a=s[i];return(c.includedPaths??(c.includedPaths=[])).push(a.info),""},e.renderer.rules.include_pop=(s,i,u,c)=>{const a=c.includedPaths;return Array.isArray(a)?a.pop():console.error("[@mdit/plugin-include]: include_pop failed, no include_push."),""},d){const s=e.renderer.rules.image;e.renderer.rules.image=(i,u,c,a,h)=>{const m=i[u],f=l(a);return f&&b("src",m,f,a.includedPaths),s(i,u,c,a,h)}}if(n){const s=e.renderer.rules.link_open||((i,u,c,a,h)=>h.renderToken(i,u,c));e.renderer.rules.link_open=(i,u,c,a,h)=>{const m=i[u],f=l(a);return f&&b("href",m,f,a.includedPaths),s(i,u,c,a,h)}}}};export{k as createIncludeCoreRule,$ as handleInclude,R as include,g as resolveInclude};
//# sourceMappingURL=index.mjs.map
