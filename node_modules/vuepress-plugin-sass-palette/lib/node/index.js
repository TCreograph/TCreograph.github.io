import{getDirname as D,path as $,fs as F}from"@vuepress/utils";import{watch as b}from"chokidar";import{isString as j,isFunction as x}from"@vuepress/shared";import{getBundlerName as A,mergeViteConfig as E,Logger as B}from"vuepress-shared/node";const R=(t,s,e)=>{var l,i,f;const p=A(s);if(p==="vite"){const r=t,n=(f=(i=(l=r.viteOptions)==null?void 0:l.css)==null?void 0:i.preprocessorOptions)==null?void 0:f.scss.additionalData;r.viteOptions=E(r.viteOptions||{},{css:{preprocessorOptions:{scss:{charset:!1,additionalData:async(u,o)=>{const c=j(n)?`${n}${u}`:x(n)?await n(u,o):u;return c.match(new RegExp(`@use\\s+["']@sass-palette\\/${e}-config["'];`))?c:`@use "@sass-palette/${e}-config";
${c}`}}}}})}else if(p==="webpack"){const r=t;r.scss||(r.scss={});const{additionalData:n}=r.scss,u=(o,c)=>{const a=j(n)?`${n}${o}`:x(n)?n(o,c):o;return a.match(new RegExp(`@use\\s+(["'])@sass-palette\\/${e}-config\\1;`))?a:`@use "@sass-palette/${e}-config";
${a}`};r.scss.additionalData=u}},z=D(import.meta.url),L=$.resolve(z,"../../styles/empty.scss"),m=new B("vuepress-plugin-sass-palette"),d=t=>F.pathExistsSync(t)?t:L,M=(t,s)=>t.writeTemp(`sass-palette/load-${s}.js`,`import "@sass-palette/${s}-inject";
export default {};
`),N=(t,s)=>t.writeTemp(`sass-palette/${s}-inject.scss`,`@use "sass:color";
@use "sass:list";
@use "sass:math";
@use "sass:map";
@use "sass:meta";

@use "@sass-palette/helper";
@use "@sass-palette/${s}-palette";

$variables: meta.module-variables("${s}-palette");
${t.env.isDebug?`
@debug "${s} palette variables: #{meta.inspect($variables)}";
@debug "${s} config variables: #{meta.inspect(meta.module-variables("${s}-config"))}";
`:""}

@each $name, $value in $variables {
  $key: helper.camel-to-kebab($name);

  @if meta.type-of($value) == number or meta.type-of($value) == string {
    :root {
      #{$key}: #{$value};
    }
  } @else if helper.color-is-legal($value) {
    @if meta.global-variable-exists("dark-selector", $module: "${s}-config") {
      @include helper.inject-color($key, $value, $dark-selector: ${s}-config.$dark-selector);
    } @else {
      @include helper.inject-color($key, $value);
    }
  }
}
`),S=(t,{id:s,defaultConfig:e,defaultPalette:l,generator:i,userConfig:f,userPalette:p})=>t.writeTemp(`sass-palette/${s}-config.scss`,`@import "file:///${d(l)}";
@import "file:///${d(e)}";
@import "file:///${d(p)}";
@import "file:///${d(f)}";
@import "file:///${d(i)}";
`),I=(t,{id:s,defaultPalette:e,generator:l,userPalette:i})=>t.writeTemp(`sass-palette/${s}-palette.scss`,`@import "file:///${d(e)}";
@import "file:///${d(i)}";
@import "file:///${d(l)}";
`),O=(t,{id:s,userStyle:e})=>e?t.writeTemp(`sass-palette/${s}-style.scss`,`@forward "file:///${d(e)}";
`):Promise.resolve(null),v=D(import.meta.url),T=t=>s=>{s.env.isDebug&&m.info("Options:",t);const{id:e="hope",config:l=`.vuepress/styles/${e}-config.scss`,defaultConfig:i=$.resolve(v,"../../styles/default/config.scss"),palette:f=`.vuepress/styles/${e}-palette.scss`,defaultPalette:p=$.resolve(v,"../../styles/default/palette.scss"),generator:r=$.resolve(v,"../../styles/empty.scss"),style:n=""}=t,u=s.dir.source(l),o=s.dir.source(f),c=n?s.dir.source(n):null;return{name:"vuepress-plugin-sass-palette",multiple:!0,id:e,alias:{["@sass-palette/helper"]:$.resolve(v,"../../styles/helper.scss"),[`@sass-palette/${e}-config`]:s.dir.temp(`sass-palette/${e}-config.scss`),[`@sass-palette/${e}-inject`]:s.dir.temp(`sass-palette/${e}-inject.scss`),[`@sass-palette/${e}-palette`]:s.dir.temp(`sass-palette/${e}-palette.scss`),...n?{[`@sass-palette/${e}-style`]:s.dir.temp(`sass-palette/${e}-style.scss`)}:{}},extendsBundlerOptions:(a,g)=>{R(a,g,e)},onInitialized:()=>Promise.all([N(s,e),S(s,{id:e,defaultConfig:i,defaultPalette:p,generator:r,userConfig:u,userPalette:o}),I(s,{id:e,defaultPalette:p,generator:r,userPalette:o}),O(s,{id:e,userStyle:c})]).then(()=>{s.env.isDebug&&m.info(`Style file for ${e} generated`)}),onWatched:(a,g)=>{const y=b(u,{cwd:a.dir.source(),ignoreInitial:!0}),w=()=>S(a,{id:e,defaultConfig:i,defaultPalette:p,generator:r,userConfig:u,userPalette:o}).then(()=>{a.env.isDebug&&m.info(`Style file for ${e} updated`)});y.on("add",()=>{w()}),y.on("unlink",()=>{w()}),g.push(y);const P=b(o,{cwd:a.dir.source(),ignoreInitial:!0}),C=()=>Promise.all([S(a,{id:e,defaultConfig:i,defaultPalette:p,generator:r,userConfig:u,userPalette:o}),I(a,{id:e,defaultPalette:p,generator:r,userPalette:o})]).then(()=>{a.env.isDebug&&m.info(`Style file for ${e} updated`)});if(P.on("add",()=>{C()}),P.on("unlink",()=>{C()}),g.push(P),c){const h=b(c,{cwd:a.dir.source(),ignoreInitial:!0}),k=()=>O(a,{id:e,userStyle:c}).then(()=>{a.env.isDebug&&m.info(`Style file for ${e} updated`)});h.on("add",()=>{k()}),h.on("unlink",()=>{k()}),g.push(h)}},clientConfigFile:a=>M(a,e)}},V=(t,s)=>{const{plugins:e}=t.pluginApi;e.filter(l=>l.name==="vuepress-plugin-sass-palette").every(l=>l.id!==s.id)&&t.use(T(s))},W=(t,s)=>{const{plugins:e}=t.pluginApi,l=e.filter(i=>i.name==="vuepress-plugin-sass-palette").findIndex(i=>i.id===s);l!==-1&&t.pluginApi.plugins.splice(l,1)};export{W as removePalettePlugin,T as sassPalettePlugin,V as useSassPalettePlugin};
//# sourceMappingURL=index.js.map
